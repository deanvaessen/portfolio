/* ==========================================================================
   Mixins
   ========================================================================== */

/*
 * Mixin for easy media queries
 * @include bp(tablet) { SCSS here };
*/
@mixin bp($point) {
	@if $point == biggie {
		@media (max-width : 1600px) { @content; }
	}
	@if $point == tablet {
		@media (max-width : 1024px) { @content; }
	}
	@else if $point == phone {
		@media (max-width : 768px) { @content; }
	}
}

/*
 * Mixin for clearfix
 * @include clearfix;
*/
@mixin clearfix {
	&:before,
	&:after {
	    content: " "; /* 1 */
	    display: table; /* 2 */
	}

	&:after {
	    clear: both;
	}
}

/*
 * Mixin for basic CSS triangles
 * @include triangle(up, #000, 50px)
*/
@mixin triangle($direction:up, $color:#000, $size:100px) {
	@if($direction == up) {
		border-color: transparent transparent $color;
		border-style: solid;
		border-width: 0 $size $size;
		height: 0;
		width: 0;
	}
	@if($direction == down) {
		border-color: $color transparent transparent transparent;
		border-style: solid;
		border-width: $size;
		height:0;
		width:0;
	}
	@if($direction == left) {
		border-color: transparent $color transparent transparent;
		border-style: solid;
		border-width: $size $size $size 0;
		height: 0;
		width: 0;
	}
	@if($direction == right) {
		border-color: transparent transparent transparent $color;
		border-style: solid;
		border-width: $size 0 $size $size;
		height:0;
		width:0;
	}
}

/*
 * @font-face mixin
 * Bulletproof font-face via Font Squirrel
 * @include fontface('family', 'assets/fonts/', 'myfontname');
 */

@mixin fontface($font-family, $font-url, $font-name) {
	@font-face {
		font: {
			family: $font-family;
			style: normal;
			weight: normal;
		}
		src: url($font-url + '/' + $font-name + '.eot');
		src: url($font-url + '/' + $font-name + '.eot#iefix') format('embedded-opentype'),
			 url($font-url + '/' + $font-name + '.woff') format('woff'),
			 url($font-url + '/' + $font-name + '.otf') format('opentype'),
			 url($font-url + '/' + $font-name + '.ttf')  format('truetype'),
			 url($font-url + '/' + $font-name + '.svg#' + $font-name) format('svg');
	}
}

// PX to EM
 // Usage: font-size: em(32px);
 @function em($pixels, $context: $browser-context) {
	 @if (unitless($pixels)) {
		 $pixels: $pixels * 1px;
	 }

	 @if (unitless($context)) {
		 $context: $context * 1px;
	 }

	 @return $pixels / $context * 1em;
 }

 @function strip-unit($num) {
	 @return $num / ($num * 0 + 1);
 }

 // REM
 // @include rem(‘padding’, 16px 0 0 0);

 // Baseline, measured in pixels
 // The value should be the same as the font-size value for the html element
 // If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
 // then the variable below would be 10px.
 $baseline-px: 16px;

 @mixin rem($property, $px-values) {
 // Convert the baseline into rems
	$baseline-rem: $baseline-px / 1rem;
 // Print the first line in pixel values
	#{$property}: $px-values;
 // If there is only one (numeric) value, return the property/value line for it.
	@if type-of($px-values) == "number" {
		#{$property}: $px-values / $baseline-rem; }
	@else {
	// Create an empty list that we can dump values into
		$rem-values: unquote("");
		@each $value in $px-values {
		// If the value is zero or a string or a color, return unchanged input
			@if $value == 0 or type-of($value) == "string" or type-of($value) == "color" {
				$rem-values: append($rem-values, $value); }
			@else {
				$rem-values: append($rem-values, $value / $baseline-rem); } }
	// Return the property and its list of converted values
		#{$property}: $rem-values; } }

 // REM
 // Usage: @include font-size(13);
 @mixin font-size($sizeValue: 1.6) {
	 font-size: ($sizeValue * 10) + px;
	 font-size: $sizeValue + rem;
 }